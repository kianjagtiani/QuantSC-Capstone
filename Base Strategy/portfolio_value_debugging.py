# -*- coding: utf-8 -*-
"""portfolio_value_debugging

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Anq8mJNxdQz7ITa76eDOA3PrpzFxJ1oH
"""

# ─── Debug Run for Year 2017 ──────────────────────────────────────────────
import numpy as np
import pandas as pd
import yfinance as yf

# Re‐use helper
def calculate_returns(price_data):
    col = 'Adj Close' if 'Adj Close' in price_data.columns else 'Close'
    r = price_data[col].pct_change().dropna()
    return r.iloc[:,0] if isinstance(r, pd.DataFrame) else r

# 2017 data
year = 2017
start, end = f'{year}-01-01', f'{year}-12-31'
spx  = yf.download('^GSPC', start=start, end=end, progress=False)
upro = yf.download('UPRO',  start=start, end=end, progress=False)
spxu = yf.download('SPXU',  start=start, end=end, progress=False)
irx  = yf.download('^IRX',  start=start, end=end, progress=False)

# Returns
r_spx   = calculate_returns(spx)
r_upro  = calculate_returns(upro)
r_spxu  = calculate_returns(spxu)
r_tbill = ((1 + calculate_returns(irx)/100)**(1/252) - 1).reindex(r_spx.index).ffill()

# Parameters
δ, θ = 0.10, 0.10
bw, br = 1/3, 2/3
dates = r_spx.index

# Initialize arrays
n = len(dates)
long_t     = np.zeros(n)
short_bull = np.zeros(n)
short_bear = np.zeros(n)
port       = np.zeros(n)

# Day 0
capital = 10000
long_t[0]     = capital
short_bull[0] = bw * capital
short_bear[0] = br * capital
port[0]       = long_t[0] + short_bull[0] + short_bear[0]

print(f"Date       | PortVal    | curr_bw  | Event")
print("-"*55)
for t in range(1, n):
    # MTM
    short_bull[t] = short_bull[t-1] * (1 - r_upro.iloc[t-1])
    short_bear[t] = short_bear[t-1] * (1 - r_spxu.iloc[t-1])
    long_t[t]     = long_t[t-1]     * (1 + r_tbill.iloc[t-1])

    total_short = short_bull[t] + short_bear[t]
    curr_bw     = short_bull[t] / total_short
    evt = ""

    # Rebalance
    low, high = bw - δ, bw + δ
    if curr_bw < low or curr_bw > high:
        evt = f"Rebalance {curr_bw:.3f}→{bw:.3f}"
        short_bull[t] = bw * total_short
        short_bear[t] = br * total_short
        curr_bw       = bw

    # Inflow/Outflow
    total_short = short_bull[t] + short_bear[t]
    ratio       = long_t[t] / total_short
    if ratio < 1 - θ:
        evt = f"Outflow   margin {ratio:.3f}→1.000"
        factor = total_short / long_t[t]
        short_bull[t] /= factor; short_bear[t] /= factor
    elif ratio > 1 + θ:
        evt = f"Inflow    margin {ratio:.3f}→1.000"
        factor = long_t[t] / total_short
        short_bull[t] *= factor; short_bear[t] *= factor

    # Portfolio value
    port[t] = long_t[t] + short_bull[t] + short_bear[t]

    date_str = dates[t].strftime("%Y-%m-%d")
    print(f"{date_str} | {port[t]:10.2f} | {curr_bw:.3f}  | {evt}")

print("\nFinal portfolio value:", port[-1])